// Generated by CoffeeScript 1.6.3
(function() {
  var Page;

  Page = (function() {
    Jitter.Page = Page;

    function Page(stream) {
      this.stream = stream;
      this.view = null;
      this.flavor = new Jitter.Flavor(this.stream);
      this.roast = new Jitter.Roast(this.stream);
      this.drink = new Jitter.Drink(this.stream);
      this.body = new Jitter.Body(this.stream);
      this.brew = new Jitter.Brew(this.stream);
      this.aroma = new Jitter.Aroma(this.stream);
      this.choice = new Jitter.Choice(this.stream);
      this.coffee = new Jitter.Coffee(this.stream);
      this.order = new Jitter.Order(this.stream);
    }

    Page.prototype.ready = function(view, spec) {
      var pane, _i, _len, _ref;
      this.view = view;
      this.spec = spec;
      _ref = this.view.panes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pane = _ref[_i];
        this.readyContent(pane, spec[pane.name]);
      }
    };

    Page.prototype.readyContent = function(pane, spec) {
      pane.page = this;
      pane.$.empty();
      switch (pane.name) {
        case "Flavor":
          this.flavor.ready(pane, spec);
          break;
        case "Roast":
          this.roast.ready(pane, spec);
          break;
        case "Drink":
          this.drink.ready(pane, spec);
          break;
        case "Body":
          this.body.ready(pane, spec);
          break;
        case "Brew":
          this.brew.ready(pane, spec);
          break;
        case "Aroma":
          this.aroma.ready(pane, spec);
          break;
        case "Choice":
          this.choice.ready(pane, spec);
          break;
        case "Coffee":
          this.coffee.ready(pane, spec);
          break;
        case "Order":
          this.order.ready(pane, spec);
          break;
        default:
          Util.error("Page.readyContent() unknown pane.name", pane.name);
      }
    };

    Page.prototype.onSelect = function(pane, select) {
      UI.verifySelect(select, 'Page');
      switch (select.intent) {
        case UI.SelectOverview:
          this.selectOverview();
          break;
        case UI.SelectPractice:
          this.selectPractice(pane);
          break;
        case UI.SelectStudy:
          this.selectStudy(pane);
          break;
        default:
          Util.error("Page.selectContent() unknown select", select);
      }
    };

    Page.prototype.selectOverview = function() {
      var pane, _i, _len, _ref, _results;
      _ref = this.view.panes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pane = _ref[_i];
        _results.push(this.readyContent(pane, this.spec[pane.name]));
      }
      return _results;
    };

    Page.prototype.selectPractice = function(pane) {
      return this.createContent(pane, this.spec[pane.name]);
    };

    Page.prototype.selectStudy = function(pane) {
      Util.noop(pane);
    };

    Page.prototype.createContent = function(pane, spec) {
      pane.$.empty();
      switch (pane.name) {
        case "Flavor":
          this.flavor.create(pane, spec);
          break;
        case "Roast":
          this.roast.create(pane, spec);
          break;
        case "Drink":
          this.drink.create(pane, spec);
          break;
        case "Body":
          this.body.create(pane, spec);
          break;
        case "Brew":
          this.brew.create(pane, spec);
          break;
        case "Aroma":
          this.aroma.create(pane, spec);
          break;
        case "Choice":
          this.choice.create(pane, spec);
          break;
        case "Coffee":
          this.coffee.create(pane, spec);
          break;
        case "Order":
          this.order.create(pane, spec);
          break;
        default:
          Util.error("Page.createContent() unknown pane.name", pane.name);
      }
    };

    return Page;

  })();

}).call(this);
