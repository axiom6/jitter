// Generated by CoffeeScript 1.6.3
(function() {
  var Tocs,
    __hasProp = {}.hasOwnProperty;

  Tocs = (function() {
    UI.Tocs = Tocs;

    function Tocs(ui, stream, practices) {
      var _ref;
      this.ui = ui;
      this.stream = stream;
      this.practices = practices;
      _ref = this.createTocsSpecs(this.practices), this.specs = _ref[0], this.stack = _ref[1];
      this.htmlIdApp = this.ui.getHtmlId('Tocs', '');
      this.last = this.specs[0];
      this.speed = 400;
    }

    Tocs.prototype.createTocsSpecs = function(practices) {
      var hasChild, keyPrac, keyStudy, practice, spec0, specN, specs, stack, study;
      spec0 = {
        level: 0,
        name: "Beg"
      };
      stack = new Array(UI.MaxTocLevel);
      stack[0] = spec0;
      specs = [];
      specs.push(spec0);
      for (keyPrac in practices) {
        if (!__hasProp.call(practices, keyPrac)) continue;
        practice = practices[keyPrac];
        hasChild = keyPrac === "Overview" ? false : practice.toc;
        this.enrichSpec(keyPrac, practice, specs, 1, spec0, hasChild, true);
        for (keyStudy in practice) {
          if (!__hasProp.call(practice, keyStudy)) continue;
          study = practice[keyStudy];
          if (!(hasChild && UI.isChild(keyStudy))) {
            continue;
          }
          practice.hasChild = true;
          this.enrichSpec(keyStudy, study, specs, 2, practice, false, false);
        }
      }
      specN = {
        level: 0,
        name: "End"
      };
      specs.push(specN);
      return [specs, stack];
    };

    Tocs.prototype.logSpecs = function() {
      var spec, _i, _len, _ref;
      _ref = this.specs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        spec = _ref[_i];
        Util.log('UI.Tocs.spec', Util.indent(spec.level * 2), spec.name, spec.hasChild);
      }
    };

    Tocs.prototype.enrichSpec = function(key, spec, specs, level, parent, hasChild, isRow) {
      spec.level = level;
      spec.parent = parent;
      spec.name = spec.name != null ? spec.name : key;
      spec.on = false;
      spec.hasChild = hasChild;
      spec.isRow = isRow;
      specs.push(spec);
    };

    Tocs.prototype.ready = function() {
      var select, spec, _i, _len, _ref;
      this.$tocs = $(this.html());
      this.$tocp = $('#' + this.htmlIdApp);
      this.$tocp.append(this.$tocs);
      _ref = this.specs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        spec = _ref[_i];
        if (!(spec.level > 0)) {
          continue;
        }
        spec.$elem = spec.hasChild ? $('#' + spec.ulId) : $('#' + spec.liId);
        spec.$li = $('#' + spec.liId);
        select = UI.select(spec.name, 'Tocs', this.intent(spec));
        this.stream.publish('Select', select, spec.$li, 'click', spec.liId);
      }
      this.subscribe();
    };

    Tocs.prototype.intent = function(spec) {
      switch (spec.level) {
        case 1:
          return this.selectOverviewOrPractice(spec);
        default:
          return UI.SelectStudy;
      }
    };

    Tocs.prototype.selectOverviewOrPractice = function(spec) {
      if (spec.name === 'Overview') {
        return UI.SelectOverview;
      } else {
        return UI.SelectPractice;
      }
    };

    Tocs.prototype.subscribe = function() {
      var _this = this;
      this.stream.subscribe('Select', function(select) {
        return _this.onSelect(select);
      });
    };

    Tocs.prototype.htmlId = function(spec, ext) {
      var suffix;
      if (ext == null) {
        ext = '';
      }
      suffix = spec.parent != null ? ext + spec.parent.name : ext;
      return this.ui.htmlId(spec.name, 'Tocs', suffix);
    };

    Tocs.prototype.getSpec = function(select, issueError) {
      var spec, _i, _len, _ref;
      if (issueError == null) {
        issueError = true;
      }
      _ref = this.specs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        spec = _ref[_i];
        if (spec.name === select.name) {
          return spec;
        }
      }
      if (issueError && this.nameNotOk(select.name)) {
        Util.error('UI.Tocs.getSpec(id) spec null for select', select);
      }
      return null;
    };

    Tocs.prototype.nameNotOk = function(name) {
      var okName, okNames, _i, _len;
      okNames = ['None', 'Embrace', 'Innovate', 'Encourage', 'Overview', 'Technique'];
      for (_i = 0, _len = okNames.length; _i < _len; _i++) {
        okName = okNames[_i];
        if (name === okName) {
          return false;
        }
      }
      return true;
    };

    Tocs.prototype.html = function() {
      var htm, i, _i, _ref;
      this.specs[0].ulId = this.htmlId(this.specs[0], 'UL');
      htm = "<ul class=\"ul0\" id=\"" + this.specs[0].ulId + "\">";
      for (i = _i = 1, _ref = this.specs.length; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
        htm += this.process(i);
      }
      return htm;
    };

    Tocs.prototype.show = function() {
      this.$tocs.show();
    };

    Tocs.prototype.hide = function() {
      this.$tocs.hide();
    };

    Tocs.prototype.process = function(i) {
      var htm, level, prev, spec, _i, _ref, _ref1;
      htm = "";
      prev = this.specs[i - 1];
      spec = this.specs[i];
      if (spec.level >= prev.level) {
        htm += this.htmlBeg(spec);
        this.stack[spec.level] = spec;
      } else {
        for (level = _i = _ref = prev.level, _ref1 = spec.level; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; level = _ref <= _ref1 ? ++_i : --_i) {
          if (this.stack[level] != null) {
            htm += this.htmlEnd(this.stack[level]);
          }
        }
        if (i < this.specs.length - 1) {
          htm += this.htmlBeg(spec);
        }
      }
      return htm;
    };

    Tocs.prototype.htmlBeg = function(spec) {
      var htm;
      spec.liId = this.htmlId(spec, 'LI');
      spec.ulId = this.htmlId(spec, 'UL');
      htm = "<li class=\"li" + spec.level + "\" id=\"" + spec.liId + "\" >";
      htm += "" + (this.htmIconName(spec));
      if (spec.hasChild) {
        htm += "<ul class=\"ul" + spec.level + "\" id=\"" + spec.ulId + "\">";
      }
      return htm;
    };

    Tocs.prototype.htmIconName = function(spec) {
      var htm;
      htm = "<div style=\"display:table;\">";
      if (spec.icon) {
        htm += "<i class=\"fa " + spec.icon + " fa-lg\"></i>";
      }
      htm += "<span style=\"display:table-cell; vertical-align:middle; padding-left:12px;\">" + (Util.toName(spec.name)) + "</span>";
      return htm += "</div>";
    };

    Tocs.prototype.htmlEnd = function(spec) {
      if (spec.level === 0) {
        return "</ul>";
      } else if (spec.hasChild) {
        return "</ul></li>";
      } else {
        return "</li>";
      }
    };

    Tocs.prototype.onSelect = function(select) {
      var spec;
      UI.verifySelect(select, 'Tocs');
      if (this.ui.notInPlane()) {
        return;
      }
      spec = this.getSpec(select, true);
      if (spec != null) {
        this.update(spec);
      }
    };

    Tocs.prototype.update = function(spec) {
      var last, level, _i, _j, _k, _ref, _ref1, _ref2;
      this.stack[spec.level] = spec;
      for (level = _i = _ref = spec.level; _i >= 2; level = _i += -1) {
        this.stack[level - 1] = this.stack[level].parent;
      }
      last = this.last;
      for (level = _j = _ref1 = this.last.level; _j >= 1; level = _j += -1) {
        if (last.name !== this.stack[level].name || level > spec.level) {
          this.reveal(last);
        }
        last = last.parent;
      }
      for (level = _k = 1, _ref2 = spec.level; _k <= _ref2; level = _k += 1) {
        if (!this.stack[level].on) {
          this.reveal(this.stack[level]);
        }
      }
      this.last = spec;
    };

    Tocs.prototype.reveal = function(spec) {
      spec.on = !spec.on;
      if (spec.level === 0) {
        return;
      }
      if (spec.hasChild) {
        spec.$elem.toggle(this.speed);
      } else {
        spec.$elem.css({
          color: spec.on ? '#FFFF00' : '#FFFFFF'
        });
      }
    };

    return Tocs;

  })();

}).call(this);
