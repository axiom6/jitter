// Generated by CoffeeScript 1.6.3
(function() {
  var RxJQ, Stream,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.$ = require('jquery');

  window.Rx = require('rx');

  RxJQ = require('lib/custom/rx.jquery');

  Stream = (function() {
    module.exports = Stream;

    Stream.SubjectNames = ['Select', 'Content', 'Connect', 'Test', 'Plane', 'About', 'Slide', 'Cursor', 'Navigate', 'Settings', 'Submit', 'Toggle', 'Layout'];

    Util.noop(RxJQ);

    function Stream(subjectNames) {
      var name, _i, _len, _ref;
      this.subjectNames = subjectNames != null ? subjectNames : Stream.SubjectNames;
      if ($().bindAsObservable == null) {
        Util.error('Stream rxjs-jquery not defined');
      }
      this.subjects = {};
      _ref = this.subjectNames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        this.subjects[name] = new Rx.Subject();
      }
      this.counts = {};
    }

    Stream.prototype.logSubjects = function() {
      var key, obj, _ref, _results;
      _ref = this.subjects;
      _results = [];
      for (key in _ref) {
        obj = _ref[key];
        _results.push(Util.log('Stream.logSubjects', key));
      }
      return _results;
    };

    Stream.prototype.getSubject = function(name, warn) {
      if (warn == null) {
        warn = false;
      }
      if (this.subjects[name] != null) {
        this.subjects[name];
      } else {
        if (warn) {
          Util.warn('Stream.getSubject() unknown subject so returning new subject for', name);
        }
        this.subjects[name] = new Rx.Subject();
      }
      return this.subjects[name];
    };

    Stream.prototype.resetSubject = function(name, subject) {
      return this.subjects[name] = subject;
    };

    Stream.prototype.subscribe = function(name, onNext, onError, onComplete) {
      var subject;
      if (onError == null) {
        onError = this.onError;
      }
      if (onComplete == null) {
        onComplete = this.onComplete;
      }
      subject = this.getSubject(name, false);
      subject.subscribe(onNext, onError, onComplete);
    };

    Stream.prototype.publish = function(name, topic, jQuerySelector, eventType) {
      var subject;
      if (jQuerySelector == null) {
        jQuerySelector = null;
      }
      if (eventType == null) {
        eventType = null;
      }
      if ((jQuerySelector == null) || (eventType == null)) {
        subject = this.getSubject(name);
        subject.mapTo(topic);
      } else {
        this.publishEvent(name, topic, jQuerySelector, eventType);
      }
    };

    Stream.prototype.publishEvent = function(name, topic, jQuerySelector, eventType) {
      var onNext, subject,
        _this = this;
      subject = this.getSubject(name);
      onNext = function(event) {
        var object;
        _this.processEvent(event);
        object = topic != null ? topic : event.target.value;
        return subject.onNext(object);
      };
      this.bindEvent(onNext, jQuerySelector, eventType);
    };

    Stream.prototype.bindEvent = function(onNext, jQuerySelector, eventType) {
      var observable, rxjq;
      rxjq = this.createRxJQuery(jQuerySelector);
      if ($().bindAsObservable != null) {
        observable = rxjq.bindAsObservable(eventType);
        observable.subscribe(onNext, this.onError, this.onComplete);
      } else {
        Util.error('Stream rxjs-jquery not defined for bindEvent()');
      }
    };

    Stream.prototype.unsubscribe = function(name) {
      var subject;
      subject = this.getSubject(name);
      subject.unsubscribe();
    };

    Stream.prototype.complete = function(completeSubject, subjects, onComplete) {
      var objects, onNext, subject, _i, _len,
        _this = this;
      this.counts[completeSubject] = {};
      this.counts[completeSubject].count = 0;
      objects = [];
      onNext = function(object) {
        objects.push(object);
        _this.counts[completeSubject].count++;
        if (_this.counts[completeSubject].count === subjects.length) {
          _this.counts[completeSubject].count = 0;
          if (typeof onComplete === 'function') {
            return onComplete(objects);
          } else {
            return publish(completeSubject, objects);
          }
        }
      };
      for (_i = 0, _len = subjects.length; _i < _len; _i++) {
        subject = subjects[_i];
        this.subscribe(subject, onNext);
      }
    };

    Stream.prototype.concat = function(name, sources, onComplete) {
      var onError, onNext, source, sub, subs, _i, _len;
      subs = [];
      for (_i = 0, _len = sources.length; _i < _len; _i++) {
        source = sources[_i];
        sub = this.getSubject(source).take(1);
        subs.push(sub);
      }
      this.subjects[name] = Rx.Observable.concat(subs).take(subs.length);
      onNext = function(object) {
        var params;
        params = object.params != null ? object.params : 'none';
        return Util.noop(params);
      };
      onError = function(error) {
        return Util.log('Stream.concat() onError', error);
      };
      this.subscribe(name, onNext, onError, onComplete);
    };

    Stream.prototype.onerror = function(name, object) {
      var subject;
      subject = this.getSubject(name);
      subject.onError(object);
    };

    Stream.prototype.topicValue = function(topic, value) {
      var object;
      object = {};
      object.topic = topic;
      object.value = value;
      return object;
    };

    Stream.prototype.isJQuery = function($elem) {
      var $;
      $ = window.$;
      return ($ != null) && ($elem != null) && ($elem instanceof $ || __indexOf.call(Object($elem), 'jquery') >= 0);
    };

    Stream.prototype.isEmpty = function($elem) {
      return ($elem != null ? $elem.length : void 0) === 0;
    };

    Stream.prototype.createRxJQuery = function(jQuerySelector) {
      if (this.isJQuery(jQuerySelector)) {
        if (this.isEmpty(jQuerySelector)) {
          Util.warn("Stream.createRxJQuery() selector " + jQuerySelector.selector + " empty");
        }
        return jQuerySelector;
      } else if (Util.isStr(jQuerySelector)) {
        return $(jQuerySelector);
      } else {
        Util.error('Stream.createRxJQuery( jqSel )', typeof jQuerySelector, jQuerySelector, 'jQuerySelector is neither jQuery object nor selector');
        return $();
      }
    };

    Stream.prototype.onNext = function(object) {
      return Util.noop(object);
    };

    Stream.prototype.onError = function(error) {
      return Util.error('Stream.onError()', error);
    };

    Stream.prototype.onComplete = function() {
      return Util.dbg('Stream.onComplete()', 'Completed');
    };

    Stream.prototype.processEvent = function(event) {
      if (event != null) {
        event.stopPropagation();
      }
      if (event != null) {
        event.preventDefault();
      }
    };

    Stream.prototype.drag = function(jqSel) {
      var dragTarget, mousedown, mousedrag, mousemove, mouseup;
      dragTarget = this.createRxJQuery(jqSel);
      mouseup = dragTarget.bindAsObservable("mouseup").publish().refCount();
      mousemove = $(document).bindAsObservable("mousemove").publish().refCount();
      mousedown = dragTarget.bindAsObservable("mousedown").publish().refCount().map(function(event) {
        event.preventDefault();
        return {
          left: event.clientX - dragTarget.offset().left,
          top: event.clientY - dragTarget.offset().top
        };
      });
      mousedrag = mousedown.selectMany(function(offset) {
        return mousemove.map(function(pos) {
          return {
            left: pos.clientX - offset.left,
            top: pos.clientY - offset.top
          };
        }).takeUntil(mouseup);
      });
      return mousedrag.subscribe(function(pos) {
        return dragTarget.css({
          top: pos.top,
          left: pos.left
        });
      });
    };

    /*
    streamFibonacci:() ->
      source = Rx.Observable.from( @fibonacci() ).take(10)
      source.subscribe( (x) -> Util.dbg( 'Text.Stream.Fibonacci()', x ) )
    
    # RxJS Experiments
    fibonacci:() ->
      fn1 = 1
      fn2 = 1
      while 1
        current = fn2;
        fn2 = fn1
        fn1 = fn1 + current
        yield current
    
    
    eventTopic:( event ) ->
      topic = 'Down'
      topic = 'Left'  if event.which is 37
      topic = 'Up'    if event.which is 38
      topic = 'Right' if event.which is 39
      topic = 'Down'  if event.which is 40
      topic
    
    # rxjs-jquery patch
    $ = $ || global.$ || window.$;
    var root = global.Rx || window.Rx,
    */


    return Stream;

  })();

}).call(this);
